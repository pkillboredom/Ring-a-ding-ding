@page "/goblinlaunch"
@using Ring_a_ding_ding.Services
@using Ring_a_ding_ding.Services.HueControl
@inject NavigationManager navigationManager
@inject VideoExecutor videoExecutor
@inject HueControlService _hueControlService
@using Microsoft.Extensions.Logging;
@using Microsoft.AspNetCore.SignalR.Client;

<PageTitle>Goblin Launcher</PageTitle>

<h1>Goblin Launcher</h1>

<button @onclick="OnArmClick">
    @if (armed)
    {
        <span>Disarm</span>
    }
    else
    {
        <span>Arm</span>
    }
</button>

<button disabled="@(!armed)" class="danger" @onclick="OnLaunchClick">Launch!</button>

<hr />

@if (!_isChatting)
{
   <div>Connecting</div>
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected </span>
        @* <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button> *@
    </div>
    // display messages
    <ScrollDiv>
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div @key="@item" class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div @key="@item" class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
    </div>
    </ScrollDiv>
}

@code {
    private bool armed = false;
    private bool launched = false;
    private CancellationTokenSource cts = new CancellationTokenSource();

    private void OnArmClick()
    {
        logger.LogInformation("WebUser Arm Click");
        armed = !armed;
        // Comment this out for real use
        if (launched)
        {
            launched = false;
            cts.Cancel();
        }
    }

    private async Task OnLaunchClick()
    {
        if (armed)
        {
            cts.Dispose();
            cts = new CancellationTokenSource();
            logger.LogInformation("WebUser Launch Click");
            launched = true;
            await videoExecutor.RunVideoScript(cts.Token);
        }
    }

    [Inject]
    private ILogger<GoblinLaunch> logger { get; set; }
    // flag to indicate chat status
    private bool _isChatting = false;

    // on-screen message
    private string _message;

    // list of messages in chat
    private readonly List<Message> _messages = new List<Message>();

    private string _hubUrl;
    private HubConnection _hubConnection;
    protected async override Task OnInitializedAsync()
    {
        logger.LogInformation("Browse : {0}", "/goblinlaunch");

        await base.OnInitializedAsync();
        await _hueControlService.TryConnectHueHub();
        await Chat();
    }

    public async Task Chat()
    {


        try
        {
            // Start chatting and force refresh UI.
            this._isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            this._messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            this._hubUrl = baseUrl.TrimEnd('/') + BlazorChatSampleHub.HubUrl;

            this._hubConnection = new HubConnectionBuilder()
                .WithUrl(this._hubUrl)
                .Build();

            this._hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await this._hubConnection.StartAsync();
            await this._hubConnection.SendAsync("JoinGroup", "LogMonitor");

        }
        catch (Exception e)
        {
            this._message = $"ERROR: Failed to start chat client: {e.Message}";
            logger.LogInformation(this._message);
            this._isChatting = false;
        }
    }



    private async Task BroadcastMessage(string name, string message)
    {
        if (name != "LOGGER") return;

        this._messages.Insert(0, new Message(name, message, false));
        // Inform blazor the UI needs updating
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task DisconnectAsync()
    {
        if (this._isChatting)
        {
            await this._hubConnection.StopAsync();
            await this._hubConnection.DisposeAsync();

            this._hubConnection = null;
            this._isChatting = false;
        }
    }

    //private async Task SendAsync(string message)
    //{
    //    if (this._isChatting && !string.IsNullOrWhiteSpace(message))
    //    {
    //        await this._hubConnection.SendAsync("Broadcast", this._username, message);
    //        this._newMessage = string.Empty;
    //    }
    //}

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }
        public bool IsNotice => Body.StartsWith("[Notice]");
        public bool IsLog => Username == "LOGGER";
        public string CSS => Mine ? "sent" : (IsLog ? "log" : "received");
    }
}